# java.util.Date implementation
scalar Date
# java.time.LocalDate implementation
scalar LocalDate
# java.time.LocalDateTime implementation
scalar LocalDateTime
# java.time.LocalTime implementation
scalar LocalTime
# java.time.OffsetDateTime implementation
scalar OffsetDateTime

type Account {
    id: ID!
    name: String!
}

enum Currency {
    CZK
    EUR
    USD
}

type Money {
    value: Float!
    currency: Currency!
}

type Label {
    name: String!
}

type TxCategory {
    id: ID!
    name: String!
    icon: String!
    childCategories: [TxCategory]!
}

interface Tx {
    id: ID!
    amount: Money!
    date: OffsetDateTime!
    category: TxCategory!
    labels: [Label]!
    account: Account!
    note: String
}

type Expense implements Tx {
    id: ID!
    amount: Money!
    date: OffsetDateTime!
    category: TxCategory!
    labels: [Label]!
    account: Account!
    note: String
}

type Income implements Tx {
    id: ID!
    amount: Money!
    date: OffsetDateTime!
    category: TxCategory!
    labels: [Label]!
    account: Account!
    note: String
}

type Transfer {
    id: ID!
    expensePart: Expense!
    incomePart: Income!
}

type Query {
}

input MoneyInput {
    value: Float!
    currency: Currency!
}

input ExpenseInput {
    id: ID
    amount: MoneyInput!
    date: OffsetDateTime!
    categoryId: ID!
    labels: [LabelInput]!
    accountId: ID!
    note: String
}

input IncomeInput {
    id: ID
    amount: MoneyInput!
    date: OffsetDateTime!
    categoryId: ID!
    labels: [LabelInput]!
    accountId: ID!
    note: String
}

input TransferInput {
    sourceAccountId: ID!
    targetAccountId: ID!
    amount: MoneyInput!
    date: OffsetDateTime!
    labels: [LabelInput]!
    note: String
}

input LabelInput {
    name: String!
}

type Mutation {
}

extend type Mutation {
    saveExpense(expense: ExpenseInput!): Expense!
    saveIncome(income: IncomeInput!): Income!
    saveTransfer(transfer: TransferInput!): Transfer!
}

schema {
    query: Query
    mutation: Mutation
}
