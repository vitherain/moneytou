type Account {
    id: ID!
    name: String!
}

enum Currency {
    CZK
    EUR
    USD
}

type Money {
    value: Float!
    currency: Currency!
}

type Label {
    name: String!
}

type TxCategory {
    id: ID!
    name: String!
    icon: String!
    childCategories: [TxCategory]!
}


# date: OffsetDateTime!
type Tx {
    id: ID!
    amount: Money!
    date: String!
    categoryId: ID!
    labels: [Label]!
    accountId: ID!
    note: String
}

type Transfer {
    expensePartId: ID!
    incomePartId: ID!
}

input PageRequest {
    page: Int!
    size: Int!
}

type Query {
    transactions(pageRequest: PageRequest): [Tx]!
}

input MoneyInput {
    value: Float!
    currency: Currency!
}

# date: OffsetDateTime!
input TxInput {
    id: ID
    amount: MoneyInput!
    date: String!
    categoryId: ID!
    labels: [LabelInput]!
    accountId: ID!
    note: String
}

# date: OffsetDateTime!
input TransferInput {
    sourceAccountId: ID!
    targetAccountId: ID!
    amount: MoneyInput!
    date: String!
    labels: [LabelInput]!
    note: String
}

input LabelInput {
    name: String!
}

type Mutation {
    saveTx(tx: TxInput!): Tx!
    saveTransfer(transfer: TransferInput!): Transfer!
}

schema {
    query: Query
    mutation: Mutation
}
